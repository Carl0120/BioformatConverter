package com.proyects.BioformatConverter.Repository;

import com.proyects.BioformatConverter.Entity.PhylipIterable;
import com.proyects.BioformatConverter.Entity.PhylipSequence;
import org.biojava.nbio.core.sequence.DNASequence;
import org.junit.jupiter.api.Test;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

class PhylipIterableRepositoryTest {

    @Test
    void copy() throws Exception {
        DNASequence sequence1 = new DNASequence("TCATATGCTTGTCTCAAAGATTAAGCCATGCATGTCTAAGTACATACCGAAATAAGGTGAAACCGCGAATGGCTCATTAAATCAGTTACGGTTCCTTAGACTGTACTTTCCTACTTGGATAACTGTGGTAATTCTAGAGCTAATACATGCATCAGAGCTCCGACCTTCGGGGACGAGCGCATTTATTAGACCAAGACCAATCGGGCTTAGGCCCGCAAATGGTGGTGACTCTGGATAACTTTCAGCTGATCGCACGGTCTAGCACCGGCGACGTATCTTTCAAGTGTCTGCCTTATCAACTTTCGATGGTAGGTTATGCGCCTACCATGGTCGTTACGGGTAACGGGGAATCAGGGTTCGATTCCGGAGAGGGAGCCTGAGAAACGGCTACCACATCCAAGGAAGGCAGCAGGCGCGCAAATTACCCACTCCCGGCACGGGGAGGTAGTGACGAAAAATAACAATACGGGACTCTATTGAGGCCCCGTAATTGGAATGGGTACAATCTAAACCCTTTAACGAGTATCCATTGGAGGGCAAGTCTGGTGCCAGCAGCCGCGGTAATTCCAGCTCCAATAGCGTATATTAAAGTTGTTGTGGTTAAAAAGCTCGTAGTTGGATCTCAGATTCAGACCTGCGGTCCACCGCCCGGTGGTTACTGTAGGGACTGGACGTTTGGCCGGATTCCTTTGATGCTCTTTGCCGAGTGTCTTGGGTGTCCGGCACGTTTACTTTGAAAAAATTAGAGTGCTCAAAGCAGGCGTACCGCCTGAATAATGGTGCATGGAATAATGGAATAAGACCTCGTCTCTATTTTGTTGGTTTTCGGAAAACGAGGAAATGATTAAGAGGGACAGACGGGGGCATTCGTATTGCGACGCTAGAGGTGAAATTCTTGGACCGTCGCAAGACGAACTACTGCGAAAGCATTTGCCAAGAATGTTTTCATTAATCAAGAACGAAAGTTAGAGGTTCGAAGGCGATCAGATACCGCCCTAGTTCTAACCATAAACGATGCCAACCAGCAATCCGCCTGAGTTCCTCAAATGACTCGGCGGGCAGCTTCCGGGAAACCAAAGTGTTTGGGTTCCAGGGGAAGTATGGTTGCAAAGCTGAAACTTAAAGGAATTGACGGAAGGGCACCACCAGGAGTGGAGCCTGCGGCTTAATTTGACTCAACACGGGAAAACTTACCCGGCCCGGACACTGGAAGGATTGACAGATTAAGAGCTCTTTCTTGATTCAGTGGGTGGTGGTGCATGGCCGTTCTTAGTTGGTGGAGCGATTTGTCTGGTTAATTCCGATAACGAACGAGACTCTAGCCTACTAAATAGACGAGCGATTACTGGAGTCGCTCGATCTTCTTAGAGGGACAAGCGGCTTTTAGCCGCACGAGACAGAGCAATAACAGGTCTGTGATGCCCTTAGATGTCCGGGGCCGCACGCGCGCTACACTGAAGGAATCAGCGTGCGTTTACCCCTGTCCGGCAGGACTGGGTAACCCGATCAACCTCCTTCGTGATAGGGATAGGGGCTTGTAATTCTTGCCCTTGAACGAGGAATTCCCAGTAAGCACGAGTCATAAGCTCGTGTTGATTACGTCCCTGCCCTTTGTACACACCGCCCGTCGCTACTACCGATTGAATGATTTAGTGAGGTCTTCGGACTGGCGCTCGGAGCGGCTTTTCTGGTCGCGCCGGCGTGCCGGAAAGATGACCGAACTTGATTATTTAGAGGAAGTAAAAGTCGTAACAAGGTTTCC");
        DNASequence sequence2 = new DNASequence("TCATATGCTTGTCTCAAAGATTAAGCCATGCATGTCTAAGTACATACCGAAATAAGGTGAAACCGCGAATGGCTCATTAAATCAGTTACGGTTCCTTAGACTGTACTTTCCTACTTGGATAACTGTGGTAATTCTAGAGCTAATACATGCATCAGAGCTCCGACCTTCGGGGACGAGCGCATTTATTAGACCAAGACCAATCGGGCTTAGGCCCGCAAATGGTGGTGACTCTGGATAACTTTCAGCTGATCGCACGGTCTAGCACCGGCGACGTATCTTTCAAGTGTCTGCCTTATCAACTTTCGATGGTAGGTTATGCGCCTACCATGGTCGTTACGGGTAACGGGGAATCAGGGTTCGATTCCGGAGAGGGAGCCTGAGAAACGGCTACCACATCCAAGGAAGGCAGCAGGCGCGCAAATTACCCACTCCCGGCACGGGGAGGTAGTGACGAAAAATAACAATACGGGACTCTATTGAGGCCCCGTAATTGGAATGGGTACAATCTAAACCCTTTAACGAGTATCCATTGGAGGGCAAGTCTGGTGCCAGCAGCCGCGGTAATTCCAGCTCCAATAGCGTATATTAAAGTTGTTGTGGTTAAAAAGCTCGTAGTTGGATCTCAGATTCAGACCTGCGGTCCACCGCCCGGTGGTTACTGTAGGGACTGGACGTTTGGCCGGATTCCTTTGATGCTCTTTGCCGAGTGTCTTGGGTGTCCGGCACGTTTACTTTGAAAAAATTAGAGTGCTCAAAGCAGGCGTACCGCCTGAATAATGGTGCATGGAATAATGGAATAAGACCTCGTCTCTATTTTGTTGGTTTTCGGAAAACGAGGAAATGATTAAGAGGGACAGACGGGGGCATTCGTATTGCGACGCTAGAGGTGAAATTCTTGGACCGTCGCAAGACGAACTACTGCGAAAGCATTTGCCAAGAATGTTTTCATTAATCAAGAACGAAAGTTAGAGGTTCGAAGGCGATCAGATACCGCCCTAGTTCTAACCATAAACGATGCCAACCAGCAATCCGCCTGAGTTCCTCAAATGACTCGGCGGGCAGCTTCCGGGAAACCAAAGTGTTTGGGTTCCAGGGGAAGTATGGTTGCAAAGCTGAAACTTAAAGGAATTGACGGAAGGGCACCACCAGGAGTGGAGCCTGCGGCTTAATTTGACTCAACACGGGAAAACTTACCCGGCCCGGACACTGGAAGGATTGACAGATTAAGAGCTCTTTCTTGATTCAGTGGGTGGTGGTGCATGGCCGTTCTTAGTTGGTGGAGCGATTTGTCTGGTTAATTCCGATAACGAACGAGACTCTAGCCTACTAAATAGACGAGCGATTACTGGAGTCGCTCGATCTTCTTAGAGGGACAAGCGGCTTTTAGCCGCACGAGACAGAGCAATAACAGGTCTGTGATGCCCTTAGATGTCCGGGGCCGCACGCGCGCTACACTGAAGGAATCAGCGTGCGTTTACCCCTGTCCGGCAGGACTGGGTAACCCGATCAACCTCCTTCGTGATAGGGATAGGGGCTTGTAATTCTTGCCCTTGAACGAGGAATTCCCAGTAAGCACGAGTCATAAGCTCGTGTTGATTACGTCCCTGCCCTTTGTACACACCGCCCGTCGCTACTACCGATTGAATGATTTAGTGAGGTCTTCGGACTGGCGCTCGGAGCGGCTTTTCTGGTCGCGCCGGCGTGCCGGAAAGATGACCGAACTTGATTATTTAGAGGAAGTAAAAGTCGTAACAAGGTTTCC");

        List<PhylipSequence> portionList  = new ArrayList<>();
        portionList.add(new PhylipSequence("KY981990.1", sequence1));
        portionList.add(new PhylipSequence("KY981990.1", sequence2));

        PhylipIterable phylipIterable = new PhylipIterable(1762, 2, portionList);

        PhylipRepository repository = new PhylipRepository();
        Path outputPath = Paths.get("files/output");

       repository.copy(phylipIterable, outputPath.resolve("prueba.pfy"));
    }

    @Test
    void read() {
    }

    @Test
    void createExtension() {
    }
}